name: Main workflow

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  validate_commits:
    name: ðŸ“– Validate commit messages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Conventional commit lint
        uses: ahmadnassri/action-commit-lint@v2.1.17

  lint:
    name: ðŸ’… Lint
    needs: validate_commits
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup monorepo
        uses: ./.github/actions/setup-monorepo

      - name: Oxlint
        run: pnpm lint

  package_tests:
    name: ðŸ§ª Run package tests
    needs: validate_commits
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup monorepo
        uses: ./.github/actions/setup-monorepo

      - name: Build packages
        run: pnpm build:packages

      - name: Test Packages
        run: pnpm test:packages

  find_examples:
    name: ðŸ”Ž Find examples
    needs: validate_commits
    runs-on: ubuntu-latest
    outputs:
      examples: ${{ steps.finds-examples.outputs.examples }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Finds examples
        id: finds-examples
        uses: ./.github/actions/find-examples

  examples_playwright_tests:
    name: ðŸŽ­ Run Playwright tests for examples
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[skip-tests]') == false
    needs: find_examples
    strategy:
      fail-fast: true
      matrix:
        example: ${{ fromJson(needs.find_examples.outputs.examples) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup monorepo
        uses: ./.github/actions/setup-monorepo

      - name: Build packages
        shell: bash
        run: pnpm build:packages

      - name: Build and serve example application
        uses: ./.github/actions/build-and-serve-example
        with:
          example: ${{ matrix.example }}

      - name: Get installed Playwright version
        id: playwright-version
        run: |
          VERSION=$(pnpm --filter "./examples/${{ matrix.example }}" exec playwright --version)
          echo "Playwright version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: playwright-cache
        with:
          path: "~/.cache/ms-playwright"
          key: "${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}"
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright's dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm --filter "./examples/${{ matrix.example }}" exec playwright install --with-deps

      - name: Run Playwright tests for ${{ matrix.example }}
        run: pnpm --filter "./examples/${{ matrix.example }}" test:playwright

  examples_cypress_tests:
    name: ðŸŒ´ Run Cypress tests for examples
    runs-on: ubuntu-latest
    needs: find_examples
    if: contains(github.event.head_commit.message, '[skip-tests]') == false
    strategy:
      fail-fast: true
      matrix:
        example: ${{ fromJson(needs.find_examples.outputs.examples) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup monorepo
        uses: ./.github/actions/setup-monorepo

      - name: Build packages
        shell: bash
        run: pnpm build:packages

      - name: Build and serve example application
        uses: ./.github/actions/build-and-serve-example
        with:
          example: ${{ matrix.example }}

      - name: Get installed Cypress version
        id: cypress-version
        run: |
          VERSION=$(pnpm --filter "./examples/${{ matrix.example }}" exec cypress --version | grep "Cypress package version:" | sed 's/Cypress package version: //g')
          echo "Cypress version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: cypress-cache
        with:
          path: "~/.cache/Cypress"
          key: "${{ runner.os }}-cypress-${{ steps.cypress-version.outputs.version }}"
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install Cypress's dependencies
        if: steps.cypress-cache.outputs.cache-hit != 'true'
        run: pnpm --filter "./examples/${{ matrix.example }}" exec cypress install

      - name: Run Cypress tests for ${{ matrix.example }}
        run: pnpm --filter "./examples/${{ matrix.example }}" test:cypress
